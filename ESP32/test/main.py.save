# Complete project details at https://RandomNerdTutorials.com
from network import WLAN 
from umqttsimple import MQTTClient 
from machine import Timer
import machine
import time
import ubinascii

global client
global room_number
room_number = '101'
#pot = machine.ADC(machine.Pin(34))
#pot = machine.ADC(machine.Pin(32))
#pot.atten(machine.ADC.ATTN_11DB)  #Full range: 3.3v

#from dht import DHT11
#sensorDHT = DHT11(machine.Pin(35, machine.Pin.IN))

plug_pin = machine.Pin(25, machine.Pin.OUT)
ligth_pin = machine.Pin(26, machine.Pin.OUT)
ac_pin = machine.Pin(14, machine.Pin.OUT)



client_id = ubinascii.hexlify(machine.unique_id())
keepLiveTime = 120



def sub_cb(topic, msg):
  print((topic, msg))
  global message, topico
  message = msg.decode().strip("'\n")
  topico = topic.decode().strip("'\n")
  
  print(topico)
  
  lista = topico.split("/")
 
  compo = lista[len(lista)-1]
  print(compo)
  print(message)
  #accrocchio-------------
  if (message == '0') :
    val = 1
  else :
    val = 0
  
  
  if (compo == "PLUG") :
    print("setto PLUG : ", str(message))
    plug_pin.value(val)
    
  elif (compo == "LIGTH") :
    print("setto LIGTH : ", str(message))
    ligth_pin.value(val)
    
  elif (compo == "AC") :
    print("setto AC : ", str(message))
    ac_pin.value(val)
  
  try:
    client.publish(str("DOMHOTEL/H001/R"+room_number+"/STATUS/"+compo), str(message),retain=True)
    #time.sleep(1)
  except :
    print("MQTT - 1")
    restart_and_reconnect()
  
  

def connect_and_subscribe():
  time.sleep(2)
  global client_id, mqtt_server, topic_sub
  client = MQTTClient(client_id, mqtt_server,port=1883,keepalive=0)
  client.set_callback(sub_cb)
  time.sleep(1)

  client.connect()
  time.sleep(1)

  client.subscribe('DOMHOTEL/H001/R'+room_number+'/SET/#')
  
  print('Connected to %s MQTT broker, subscribed to %s topic' % (mqtt_server, topic_sub))
  return client

def restart_and_reconnect():
  print('Failed to connect to MQTT broker. Reconnecting...')
  time.sleep(5)
  #client = connect_and_subscribe()
  machine.reset()






try:
  client = connect_and_subscribe()
except :
  print("errore conn MQTT")
  restart_and_reconnect()

tim = Timer(-1)
tim.init(period=keepLiveTime*1000, mode=Timer.PERIODIC, callback=lambda t: keepLiveTimeCb(client))

def keepLiveTimeCb(c):
  print("PINGGGGGGG")
  
  try:
    c.ping()
    c.publish("DOMHOTEL/H001/R001/PING","PING",retain=False)
    #time.sleep(1)
  except :
    print("MQTT - 9")
    restart_and_reconnect()
  
  time.sleep(1)


old_temp = None
old_hum  = None
temp = 0
hum = 0


# definisco gli indirizzi delle sonde
SondeTemp = {}
SondeVal  = {}
SondeVal["ST/VAL/ST01"] = 0
#SondeVal["ST/VAL/ST02"] = 0
#SondeVal["ST/VAL/ST03"] = 0
#SondeVal["ST/VAL/ST04"] = 0
#SondeVal["ST/VAL/ST05"] = 0
#SondeVal["ST/VAL/ST06"] = 0

SondeTemp["ST/VAL/ST01"] = bytearray(b'(\xffu\\\xb4\x16\x05f')
#SondeTemp["ST/VAL/ST02"] = bytearray(b'(\xff\xe5\xca\xb4\x16\x03\xe4')
#SondeTemp["ST/VAL/ST03"] = bytearray(b'(\xff\xee^\xb4\x16\x05\xa6')
#SondeTemp["ST/VAL/ST04"] = bytearray(b'(\xff\x8fn\xb4\x16\x052')
#SondeTemp["ST/VAL/ST05"] = bytearray(b'(\xff$\xc6\xc0\x16\x04\xeb')
#SondeTemp["ST/VAL/ST06"] = bytearray(b'(\xff$\xc6\xc0\x16\x04\xeb')



while True:
    
  #pot_value = pot.read()
  #print(pot_value)
    
  #try :
   # sensorDHT.measure ()
   # temp=sensorDHT.temperature ()
   # hum=sensorDHT.humidity()
  #except :
  #  print("errore temp")
  #  continue

  #print ("T={:02d} ºC, H={:02d} %".format (temp,hum))  
   
  # ricevo messaggi in coda  
  try:
    client.check_msg()
    #time.sleep(1)

  except :
    print("MQTT - 2")

   # restart_and_reconnect()
  # invio temperatura ed umidità solo se cambiati
  #if (old_temp != temp ) :
  #  try:
  #    client.publish(str("DOMHOTEL/H001/R001/STATUS/TEMP"),  str(temp) ,retain=True)
   #   time.sleep(1)

   # except :
   #  print("MQTT - 3")

   #   restart_and_reconnect()
    
    
    #old_temp = temp
    
 # if (old_hum != hum) :
  #  try:
   #   client.publish(str("DOMHOTEL/H001/R001/STATUS/HUM"),  str(hum) ,retain=True)
  #    time.sleep(1)

   # except :
   #   print("MQTT - 4")

   #   restart_and_reconnect()
      
   # old_hum = hum
   
   
  #ds_sensor.convert_temp()
  #time.sleep_ms(750)
  #for sonda in SondeTemp:
  #  val = ds_sensor.read_temp(SondeTemp[str(sonda)])
   
   # if val != SondeVal[str(sonda)] :
   #   print(str(sonda))
    #  print(val)
    #  SondeVal[str(sonda)] = val
      #try:
      #  client.publish(str(sonda), str(val),retain=True)
      #except OSError as e:
      #  restart_and_reconnect()
    
  time.sleep(1)

